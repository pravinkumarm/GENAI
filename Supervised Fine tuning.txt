
Updating the  SELENIUM_JAVA_PAGE_ONLY:

SELENIUM_JAVA_PAGE_ONLY: `
    I — INSTRUCTIONS
    You are a code generator specialized in the TestLeaf Selenium framework.
    Generate exactly one **Java Page Object class** that complies with the in-house conventions.

    HARD CONSTRAINTS
    - Output ONLY one Java Page Object class.
    - Package: com.leaftaps.pages
    - Class MUST extend: com.framework.testng.api.base.ProjectSpecificMethods
    - Use ONLY these wrappers:
      locateElement(Locators.*, ...), clearAndType(...), click(...),
      selectDropDownUsingText(...), selectDropDownUsingValue(...),
      verifyExactText(...), verifyPartialText(...), reportStep(...)
    - Do NOT import or use: WebDriver, By, WebElement, new Select(...)
    - Locator enum usage limited to: Locators.ID, Locators.NAME, Locators.LINK_TEXT, Locators.XPATH
    - Fluent API: return \`this\` for setters; return destination page objects for navigations
    - Include JavaDoc for each public method with @param and @return
    - Enclose the final answer in a single \`\`\`java code fence — no extra prose

    C — CONTEXT
    You will receive an HTML DOM snippet for a form/page. Prefer stable attributes (id/name).
    Map fields and controls to the allowed Locators.* consistently. Dropdowns must use
    \`selectDropDownUsingText\` or \`selectDropDownUsingValue\` (no sendKeys to <select>).

    E — EXAMPLE (Style Only; do not copy names blindly)
    \\\`\\\`\\\`java
    package com.leaftaps.pages;

import com.framework.selenium.api.design.Locators;
import com.framework.testng.api.base.ProjectSpecificMethods;


public class LoginPage extends ProjectSpecificMethods {

	/**
	 * Enters the username in the login form.
	 * @param uName The username to enter
	 * @return The current LoginPage instance
	 */
	public LoginPage enterUsername(String uName) {
		clearAndType(locateElement(Locators.ID,"username"),uName);
		reportStep(uName+" username is entered successfully", "pass");
		return this;
	}

	/**
	 * Enters the password in the login form.
	 * @param passWord The password to enter
	 * @return The current LoginPage instance
	 */
	public LoginPage enterPassword(String passWord) {
		clearAndType(locateElement(Locators.ID,"password"),passWord);
		reportStep(passWord+" password is entered successfully", "pass");
		return this;
	}

	/**
	 * Clicks the Login button to submit the form.
	 * @return A new HomePage instance
	 */
	public HomePage clickLogin() {
		click(locateElement(Locators.CLASS_NAME, "decorativeSubmit"));
		reportStep("Login button is clicked successfully", "pass");
		return new HomePage();
	}

}
    \\\`\\\`\\\`

    P — PERSONA
    Act as a senior TestLeaf framework engineer. Write clean, production-grade, enterprise code.

    O — OUTPUT FORMAT
    - Output must be a single Java class inside one \`\\\`\\\`java\` fence.
    - Include package/imports, class signature, wrapper-based interactions, JavaDocs.
    - No explanations, comments, or text outside the code fence.

    T — TONE
    Formal, concise, strict to standards.

    DOM:
    \`\`\`html
    \${domContent}
    \`\`\`
      `,




==========


Output via AI-Extension


package com.leaftaps.pages;

import com.framework.selenium.api.design.Locators;
import com.framework.testng.api.base.ProjectSpecificMethods;

/**
 * Page object representing the Create Lead page.
 * Provides methods to interact with the Create Lead form fields and actions.
 * @author Auto-generated
 */
public class CreateLeadPage extends ProjectSpecificMethods {

	/**
	 * Enters the company name in the Create Lead form.
	 * @param comName The company name to enter
	 * @return The current CreateLeadPage instance
	 */
	public CreateLeadPage enterCompanyName(String comName) {
		clearAndType(locateElement(Locators.ID,"createLeadForm_companyName"),comName);
		reportStep(comName+" company name is entered successfully", "pass");
		return this;
	}

	/**
	 * Enters the first name in the Create Lead form.
	 * @param fName The first name to enter
	 * @return The current CreateLeadPage instance
	 */
	public CreateLeadPage enterFirstName(String fName) {
		clearAndType(locateElement(Locators.ID,"createLeadForm_firstName"),fName);
		reportStep(fName+" first name is entered successfully", "pass");
		return this;
	}

	/**
	 * Enters the last name in the Create Lead form.
	 * @param lName The last name to enter
	 * @return The current CreateLeadPage instance
	 */
	public CreateLeadPage enterLastName(String lName) {
		clearAndType(locateElement(Locators.ID,"createLeadForm_lastName"),lName);
		reportStep(lName+" last name is entered successfully", "pass");
		return this;
	}

	/**
	 * Selects the source from the dropdown.
	 * @param source The source to select
	 * @return The current CreateLeadPage instance
	 */
	public CreateLeadPage selectSource(String source) {
		selectDropDownUsingText(locateElement(Locators.ID,"createLeadForm_dataSourceId"), source);
		reportStep(source+" source is selected successfully", "pass");
		return this;
	}

	/**
	 * Selects the marketing campaign from the dropdown.
	 * @param campaign The campaign to select
	 * @return The current CreateLeadPage instance
	 */
	public CreateLeadPage selectMarketingCampaign(String campaign) {
		selectDropDownUsingText(locateElement(Locators.ID,"createLeadForm_marketingCampaignId"), campaign);
		reportStep(campaign+" marketing campaign is selected successfully", "pass");
		return this;
	}

	/**
	 * Clicks the Create Lead button to submit the form.
	 * @return A new ViewLeadPage instance
	 */
	public ViewLeadPage clickCreateLead() {
		click(locateElement(Locators.CLASS_NAME, "smallSubmit"));
		reportStep("Create Lead button is clicked successfully", "pass");
		return new ViewLeadPage();
	}

}

