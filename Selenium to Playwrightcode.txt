Instructions:
I need to convert the java selenium code into a playwrite typescript for test automation.
I need a clean code only, no additional text.
I need only the give selenium code to be converted
Give proper locator as per the given DOM
Give proper waiting time for the element to appear

Context:
You are a AI assistance to write good test automation code
You have to use the given HTML DOM structure for creating Playwright code 
This is a online Retail application
DOM

<form class=""><div class="mb-3"><label class="form-label">Country of Residence</label><select class="form-select"><option value="">Select Country</option><option value="United States">United States</option><option value="Canada">Canada</option><option value="United Kingdom">United Kingdom</option><option value="India">India</option><option value="Australia">Australia</option><option value="Other">Other</option></select></div><div class="mb-3"><label class="form-label">Title</label><select class="form-select"><option value="">Select Title</option><option value="Mr.">Mr.</option><option value="Ms.">Ms.</option><option value="Mrs.">Mrs.</option><option value="Dr.">Dr.</option><option value="Prof.">Prof.</option></select></div><div class="row"><div class="mb-3 col-md-6"><label class="form-label">First Name</label><input type="text" class="form-control" value=""></div><div class="mb-3 col-md-6"><label class="form-label">Last Name</label><input type="text" class="form-control" value=""></div></div><div class="mb-3"><label class="form-label">Date of Birth</label><div class="react-datepicker-wrapper"><div class="react-datepicker__input-container"><input type="text" placeholder="YYYY-MM-DD" class="form-control" value=""></div></div></div><div class="mb-3"><label class="form-label">Date of Joining (dd/mm/yyyy)</label><input placeholder="dd/mm/yyyy" type="text" class="form-control" value=""></div><div class="mb-3"><label class="form-label">Email Address</label><input type="email" class="form-control" value=""></div><div class="mb-3"><label class="form-label">Phone Number</label><div class="row"><div class="col-md-4"><select class="form-select"><option value="+1">+1</option><option value="+44">+44</option><option value="+91">+91</option><option value="+61">+61</option><option value="+86">+86</option><option value="+Other">+Other</option></select></div><div class="col-md-8"><input type="tel" class="form-control" value=""></div></div></div><div class="mb-3"><label class="form-label">Preferred Communication Method</label><div><div class="form-check form-check-inline"><input type="radio" class="form-check-input" value="email"><label title="" class="form-check-label">Email</label></div><div class="form-check form-check-inline"><input type="radio" class="form-check-input" value="phone"><label title="" class="form-check-label">Phone</label></div></div></div><div class="d-flex justify-content-end gap-2"><button type="button" class="btn btn-secondary">Clear</button><button type="submit" class="btn btn-primary">Submit</button></div></form>


Examples:



Selenium code:


package Week2HWgetseleniumJavaCode;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import java.time.Duration;

public class OnlineShoppingTest {
    WebDriver driver;
    WebDriverWait wait;
    
    @BeforeMethod
    public void setUp() {
        try {
            System.setProperty("webdriver.chrome.driver", "chromedriver");
            driver = new ChromeDriver();
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            driver.manage().window().maximize();
            driver.get("https://www.amazon.com");
        } catch (Exception e) {
            System.out.println("Browser setup failed: " + e.getMessage());
        }
    }
    
    // Test Case: Verify Today's Deals Navigation
    // Scenario: User should be able to navigate to Today's Deals page from main navigation
    @Test
    public void testTodaysDealsNavigation() {
        try {
            WebElement todaysDealsLink = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//a[contains(text(), \"Today's Deals\")]")));
            todaysDealsLink.click();
            
            wait.until(ExpectedConditions.titleContains("Today's Deals"));
            
        } catch (Exception e) {
            System.out.println("Test execution failed: " + e.getMessage());
        }
    }
    
    @AfterMethod
    public void tearDown() {
        try {
            if (driver != null) {
                driver.quit();
            }
        } catch (Exception e) {
            System.out.println("Browser cleanup failed: " + e.getMessage());
        }
    }
}


Persona:
 - Act as a senior test automation developer and expert in writing playwrite typescript code

Output:
 - Include the comments section, scripter name as :Pravin, date:todays date, also include the key logic or scenario details
- Follow the code standard as per the tech stack given



Response:-

/**
 * Test Case: User Registration Form Submission
 * Scenario: User should be able to fill and submit the registration form with all required fields
 * Scripter: Pravin
 * Date: 2024-12-19
 * Key Logic:
 * - Fill all form fields including country, title, name, dates, email, phone
 * - Select preferred communication method
 * - Submit the form and verify successful submission
 */

import { test, expect, Page } from '@playwright/test';

test.describe('User Registration Form Tests', () => {
  let page: Page;

  test.beforeEach(async ({ page: testPage }) => {
    page = testPage;
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('https://yourapplication.com/register');
  });

  test('Complete user registration form submission', async () => {
    // Select Country of Residence
    await page.locator('select.form-select').first().waitFor({ state: 'visible' });
    await page.locator('select.form-select').first().selectOption('United States');

    // Select Title
    await page.locator('select.form-select').nth(1).selectOption('Mr.');

    // Fill First Name
    await page.locator('input[type="text"]').first().fill('John');

    // Fill Last Name
    await page.locator('input[type="text"]').nth(1).fill('Doe');

    // Fill Date of Birth
    await page.locator('input[placeholder="YYYY-MM-DD"]').fill('1990-01-15');

    // Fill Date of Joining
    await page.locator('input[placeholder="dd/mm/yyyy"]').fill('15/01/2024');

    // Fill Email Address
    await page.locator('input[type="email"]').fill('john.doe@example.com');

    // Select Phone Country Code and Fill Phone Number
    await page.locator('select.form-select').nth(2).selectOption('+1');
    await page.locator('input[type="tel"]').fill('1234567890');

    // Select Preferred Communication Method
    await page.locator('input[value="email"]').check();

    // Submit the form
    await page.locator('button.btn-primary').click();

    // Verify successful form submission
    await expect(page.locator('.alert-success')).toBeVisible({ timeout: 10000 });
  });

  test('Clear form data using Clear button', async () => {
    // Fill some form data
    await page.locator('input[type="text"]').first().fill('Test');
    await page.locator('input[type="email"]').fill('test@example.com');

    // Click Clear button
    await page.locator('button.btn-secondary').click();

    // Verify form is cleared
    await expect(page.locator('input[type="text"]').first()).toHaveValue('');
    await expect(page.locator('input[type="email"]')).toHaveValue('');
  });
});
