Instructions:
I need to convert the java selenium code into a playwrite typescript for test automation.
I need a clean code only, no additional text.
I need only the give selenium code to be converted
Give proper locator as per the given DOM
Give proper waiting time for the element to appear

Context:
You are a AI assistance to write good test automation code
You have to use the given HTML DOM structure for creating Playwright code 
This is a online Retail application
Create code with URL "https://testerbud.com/flight-booking-scenarios"
DOM

<form class=""><div class="mb-3 row"><div class="col-md-6"><div><label class="form-label" for="from">From:</label><select class="form-select" id="from"><option value="">Select City</option><option value="New York">New York</option><option value="London">London</option><option value="Tokyo">Tokyo</option><option value="Paris">Paris</option><option value="Sydney">Sydney</option><option value="Mumbai">Mumbai</option><option value="Delhi">Delhi</option><option value="Dubai">Dubai</option><option value="Singapore">Singapore</option></select></div></div><div class="col-md-6"><div><label class="form-label" for="to">To:</label><select class="form-select" id="to"><option value="">Select City</option><option value="New York">New York</option><option value="London">London</option><option value="Tokyo">Tokyo</option><option value="Paris">Paris</option><option value="Sydney">Sydney</option><option value="Mumbai">Mumbai</option><option value="Delhi">Delhi</option><option value="Dubai">Dubai</option><option value="Singapore">Singapore</option></select></div></div></div><div class="mb-3 row"><div class="col-md-6"><div><label class="form-label" for="departureDate">Departure Date:</label><input min="2025-10-24" type="date" id="departureDate" class="form-control" value=""></div></div><div class="col-md-6"><div><label class="form-label" for="returnDate">Return Date:</label><input min="2025-10-24" type="date" id="returnDate" class="form-control" value=""></div></div></div><div class="mb-3 row"><div class="col-md-4"><div><label class="form-label" for="passengers">Passengers:</label><input min="1" type="number" id="passengers" class="form-control" value="1"></div></div><div class="col-md-4"><div><label class="form-label" for="travelClass">Travel Class:</label><select class="form-select" id="travelClass"><option value="Economy">Economy</option><option value="Business">Business</option><option value="First">First</option></select></div></div><div class="d-flex align-items-end col-md-4"><div class="form-check"><input type="checkbox" id="oneWay" class="form-check-input"><label title="" for="oneWay" class="form-check-label">One Way</label></div></div></div><button type="button" class="w-100 btn btn-primary">Search Flights</button></form>


Examples:



Selenium code:


package Week2HWgetseleniumJavaCode;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import java.time.Duration;

public class OnlineShoppingTest {
    WebDriver driver;
    WebDriverWait wait;
    
    @BeforeMethod
    public void setUp() {
        try {
            System.setProperty("webdriver.chrome.driver", "chromedriver");
            driver = new ChromeDriver();
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            driver.manage().window().maximize();
            driver.get("https://www.amazon.com");
        } catch (Exception e) {
            System.out.println("Browser setup failed: " + e.getMessage());
        }
    }
    
    // Test Case: Verify Today's Deals Navigation
    // Scenario: User should be able to navigate to Today's Deals page from main navigation
    @Test
    public void testTodaysDealsNavigation() {
        try {
            WebElement todaysDealsLink = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//a[contains(text(), \"Today's Deals\")]")));
            todaysDealsLink.click();
            
            wait.until(ExpectedConditions.titleContains("Today's Deals"));
            
        } catch (Exception e) {
            System.out.println("Test execution failed: " + e.getMessage());
        }
    }
    
    @AfterMethod
    public void tearDown() {
        try {
            if (driver != null) {
                driver.quit();
            }
        } catch (Exception e) {
            System.out.println("Browser cleanup failed: " + e.getMessage());
        }
    }
}


Persona:
 - Act as a senior test automation developer and expert in writing playwrite typescript code

Output:
 - Include the comments section, scripter name as :Pravin, date:todays date, also include the key logic or scenario details
- Follow the code standard as per the tech stack given



Response:-
/**
 * Author: Pravin
 * Date: 2025-10-25
 * Scenario: Verify flight booking form functionality on TesterBud Flight Booking page
 * Application: Online Retail (Flight Booking)
 */

import { test, expect } from '@playwright/test';

test.describe('Flight Booking Form Test', () => {

  test('Verify user can fill and submit the flight booking form', async ({ page }) => {
    
    // Navigate to the flight booking page
    await page.goto('https://testerbud.com/flight-booking-scenarios');
    
    // Wait for the "From" dropdown to be visible and select a city
    const fromDropdown = page.locator('#from');
    await fromDropdown.waitFor({ state: 'visible' });
    await fromDropdown.selectOption('Mumbai');

    // Wait for the "To" dropdown to be visible and select a city
    const toDropdown = page.locator('#to');
    await toDropdown.waitFor({ state: 'visible' });
    await toDropdown.selectOption('Dubai');

    // Wait for the departure date input and fill date
    const departureDate = page.locator('#departureDate');
    await departureDate.waitFor({ state: 'visible' });
    await departureDate.fill('2025-11-01');

    // Wait for the return date input and fill date
    const returnDate = page.locator('#returnDate');
    await returnDate.waitFor({ state: 'visible' });
    await returnDate.fill('2025-11-10');

    // Wait for passengers input and set value
    const passengers = page.locator('#passengers');
    await passengers.waitFor({ state: 'visible' });
    await passengers.fill('2');

    // Wait for travel class dropdown and select option
    const travelClass = page.locator('#travelClass');
    await travelClass.waitFor({ state: 'visible' });
    await travelClass.selectOption('Business');

    // Wait for One Way checkbox and check it
    const oneWayCheckbox = page.locator('#oneWay');
    await oneWayCheckbox.waitFor({ state: 'visible' });
    await oneWayCheckbox.check();

    // Wait for Search Flights button and click
    const searchButton = page.locator('button.btn.btn-primary');
    await searchButton.waitFor({ state: 'visible' });
    await searchButton.click();

    // Assertion example (verify button click or form submission)
    await expect(page).toHaveURL(/.*flight-booking-scenarios/);
  });
});




Response in try playwright website :-

Logs

Running 1 test using 1 worker

✓ 1 example.spec.ts:12:7 › Flight Booking Form Test › Verify user can fill and submit the flight booking form (2.3s)

1 passed (3.8s)
